{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Platform Service Manifest",
  "description": "Defines a service, its infrastructure components, and their configuration for deployment via the platform.",
  "type": "object",
  "required": [
    "service",
    "owner",
    "components"
  ],
  "properties": {
    "service": {
      "type": "string",
      "description": "The unique name of the service (e.g., 'order-api').",
      "pattern": "^[a-z0-9-]+$"
    },
    "owner": {
      "type": "string",
      "description": "The team or individual that owns this service (e.g., 'team-fulfillment')."
    },
    "complianceFramework": {
      "type": "string",
      "description": "The compliance framework to apply.",
      "enum": [
        "commercial",
        "fedramp-moderate",
        "fedramp-high"
      ],
      "default": "commercial"
    },
    "runtime": {
      "type": "string",
      "description": "The primary application runtime for the service (e.g., 'nodejs20')."
    },
    "labels": {
      "type": "object",
      "description": "A map of key-value pairs for service discovery and categorization.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "environments": {
      "$ref": "#/$defs/environmentConfiguration"
    },
    "components": {
      "type": "array",
      "description": "The list of infrastructure components that make up this service.",
      "items": {
        "$ref": "#/$defs/component"
      },
      "minItems": 1
    },
    "extensions": {
      "$ref": "#/$defs/extensions"
    }
  },
  "$defs": {
    "environmentConfiguration": {
      "type": "object",
      "description": "Configuration defaults for different environments (e.g., dev, qa, prod).",
      "properties": {
        "$ref": {
          "type": "string",
          "description": "A relative path to an external YAML or JSON file containing environment definitions."
        }
      },
      "additionalProperties": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "A relative path to a file for a specific environment's configuration."
          },
          "defaults": {
            "type": "object",
            "description": "Default values for this environment, accessible via ${env:key} interpolation."
          }
        }
      }
    },
    "component": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "A unique name for this component instance within the service.",
          "pattern": "^[a-z0-9-]+$"
        },
        "type": {
          "type": "string",
          "description": "The type of component to create (e.g., 'rds-postgres', 'lambda-api')."
        },
        "config": {
          "type": "object",
          "description": "Component-specific configuration. The schema is defined by the component itself."
        },
        "binds": {
          "type": "array",
          "description": "Declarative bindings to other components.",
          "items": {
            "$ref": "#/$defs/binding"
          }
        },
        "triggers": {
          "type": "array",
          "description": "Declarative, event-driven invocations from this component to a target.",
          "items": {
            "$ref": "#/$defs/trigger"
          }
        },
        "labels": {
          "type": "object",
          "description": "A map of key-value pairs for this specific component instance.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "overrides": {
          "type": "object",
          "description": "Fine-grained overrides for the component's underlying resources."
        },
        "policy": {
          "type": "object",
          "description": "Component-specific policy and governance settings."
        }
      }
    },
    "binding": {
      "type": "object",
      "required": [
        "capability",
        "access"
      ],
      "oneOf": [
        { "required": ["to"] },
        { "required": ["select"] }
      ],
      "properties": {
        "to": {
          "type": "string",
          "description": "The name of the target component to bind to."
        },
        "select": {
          "$ref": "#/$defs/selector"
        },
        "capability": {
          "type": "string",
          "description": "The capability of the target to connect to (e.g., 'db:postgres')."
        },
        "access": {
          "type": "string",
          "description": "The level of access required.",
          "enum": [
            "read",
            "write",
            "readwrite",
            "admin"
          ]
        },
        "env": {
          "type": "object",
          "description": "Optional custom names for injected environment variables."
        },
        "options": {
          "type": "object",
          "description": "Advanced, binder-specific options (e.g., 'iamAuth: true')."
        }
      }
    },
    "trigger": {
      "type": "object",
      "required": ["event", "target"],
      "properties": {
        "event": {
          "type": "string",
          "description": "The event on the source component that triggers the action (e.g., 'objectCreated')."
        },
        "target": {
          "type": "string",
          "description": "The name of the target component to be invoked."
        }
      }
    },
    "selector": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The component type to select."
        },
        "withLabels": {
          "type": "object",
          "description": "A map of labels that the target component must match.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "extensions": {
      "type": "object",
      "properties": {
        "patches": {
          "type": "array",
          "description": "Registration of programmatic patches from the 'patches.ts' file for audit purposes.",
          "items": {
            "$ref": "#/$defs/patch"
          }
        }
      }
    },
    "patch": {
      "type": "object",
      "required": [
        "name",
        "justification",
        "owner",
        "expiresOn"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the exported function in 'patches.ts' to apply."
        },
        "justification": {
          "type": "string",
          "description": "A required, human-readable reason for using the escape hatch.",
          "minLength": 20
        },
        "owner": {
          "type": "string",
          "description": "The team or individual responsible for this patch."
        },
        "expiresOn": {
          "type": "string",
          "description": "An ISO 8601 date (YYYY-MM-DD) after which this patch is considered expired and will fail validation.",
          "format": "date"
        }
      }
    }
  }
}