# Enterprise Dagger Pipeline Configuration
# Example configuration for large-scale enterprise deployments

# Global pipeline configuration
pipeline:
  name: "shinobi-enterprise-pipeline"
  version: "1.0.0"
  description: "Enterprise-grade Shinobi platform pipeline with compliance and security"

# Environment configurations
environments:
  development:
    name: "dev"
    compliance_framework: "commercial"
    fips_compliance: false
    mtls_enabled: false
    skip_deploy: true
    output_format: "pretty"

  staging:
    name: "staging"
    compliance_framework: "fedramp-moderate"
    fips_compliance: true
    mtls_enabled: true
    skip_deploy: false
    output_format: "json"

  production:
    name: "prod"
    compliance_framework: "fedramp-high"
    fips_compliance: true
    mtls_enabled: true
    skip_deploy: false
    output_format: "json"

# Pipeline steps configuration
steps:
  validation:
    enabled: true
    timeout: "10m"
    retries: 2

  testing:
    enabled: true
    timeout: "30m"
    retries: 1
    coverage_threshold: 80
    parallel_jobs: 4

  audit:
    enabled: true
    timeout: "15m"
    retries: 1
    strict_mode: true

  planning:
    enabled: true
    timeout: "20m"
    retries: 1

  deployment:
    enabled: true
    timeout: "60m"
    retries: 1
    manual_approval: true

# Security configuration
security:
  # Base image configurations
  base_images:
    commercial: "node:20-alpine"
    fips_compliant: "public.ecr.aws/aws-distroless/nodejs20-fips:latest"

  # Network isolation
  network_isolation: true

  # Secrets management
  secrets:
    aws:
      access_key_id: "${AWS_ACCESS_KEY_ID}"
      secret_access_key: "${AWS_SECRET_ACCESS_KEY}"
      region: "${AWS_DEFAULT_REGION}"
    github:
      token: "${GITHUB_TOKEN}"
    dagger:
      engine_pool_cert: "${DAGGER_ENGINE_POOL_CERT}"
      engine_pool_key: "${DAGGER_ENGINE_POOL_KEY}"
      engine_pool_ca: "${DAGGER_ENGINE_POOL_CA}"

# Compliance configurations
compliance:
  commercial:
    features:
      - standard_security
      - basic_audit_logging
      - standard_encryption

  fedramp_moderate:
    features:
      - fips_compliant_images
      - enhanced_audit_logging
      - network_isolation
      - secrets_mounting
      - compliance_validation

  fedramp_high:
    features:
      - fips_compliant_images
      - stig_hardening
      - network_isolation
      - no_secrets_mounting
      - extended_retention
      - compliance_validation

# CI Provider configurations
ci_providers:
  github_actions:
    workflow_file: ".github/workflows/platform-pipeline.yml"
    triggers:
      - push: ["main", "develop"]
      - pull_request: ["main"]
      - workflow_dispatch
    permissions:
      contents: "read"
      actions: "write"
      security-events: "write"

  gitlab_ci:
    config_file: ".gitlab-ci.yml"
    stages: ["validate", "test", "audit", "plan", "deploy"]
    rules:
      - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

  jenkins:
    pipeline_file: "Jenkinsfile"
    triggers:
      - github_push
      - github_pull_request
    parameters:
      - choice: "ENVIRONMENT"
      - choice: "COMPLIANCE_FRAMEWORK"
      - boolean: "SKIP_DEPLOY"

# Monitoring and observability
monitoring:
  metrics:
    enabled: true
    endpoint: "${METRICS_ENDPOINT}"
    namespace: "shinobi-pipeline"

  logging:
    level: "info"
    format: "json"
    destination: "${LOG_DESTINATION}"

  alerting:
    enabled: true
    webhook: "${ALERT_WEBHOOK}"
    thresholds:
      failure_rate: 5
      execution_time: 30

# Artifact management
artifacts:
  retention:
    pipeline_results: "30d"
    compliance_reports: "90d"
    security_scans: "30d"
    deployment_plans: "30d"

  storage:
    type: "s3"
    bucket: "${ARTIFACTS_BUCKET}"
    prefix: "pipeline-artifacts"

  formats:
    - json
    - yaml
    - sarif
    - junit

# Integration configurations
integrations:
  # Slack notifications
  slack:
    enabled: true
    webhook: "${SLACK_WEBHOOK}"
    channels:
      - "#devops"
      - "#security"

  # JIRA integration
  jira:
    enabled: true
    server: "${JIRA_SERVER}"
    project_key: "${JIRA_PROJECT}"

  # ServiceNow integration
  servicenow:
    enabled: true
    instance: "${SERVICENOW_INSTANCE}"
    table: "change_request"

# Performance optimization
performance:
  cache:
    enabled: true
    ttl: "1h"
    strategy: "aggressive"

  parallel_execution:
    enabled: true
    max_workers: 4

  resource_limits:
    cpu: "2"
    memory: "4Gi"
    disk: "10Gi"

# Backup and recovery
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "7d"
  destination: "${BACKUP_DESTINATION}"
