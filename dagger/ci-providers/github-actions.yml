name: Shinobi Platform Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      compliance_framework:
        description: "Compliance framework"
        required: true
        default: "commercial"
        type: choice
        options:
          - commercial
          - fedramp-moderate
          - fedramp-high
      skip_deploy:
        description: "Skip deployment step"
        required: false
        default: false
        type: boolean

env:
  DAGGER_VERSION: "0.9.0"
  NODE_VERSION: "20"

jobs:
  platform-pipeline:
    runs-on: ubuntu-latest
    name: Platform Pipeline (${{ github.event.inputs.environment || 'dev' }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dagger CLI
        run: |
          cd /usr/local
          curl -L https://dl.dagger.io/dagger/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup Dagger
        run: |
          dagger version
          dagger project init --name=shinobi-platform

      - name: Run Platform Pipeline
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
          COMPLIANCE_FRAMEWORK: ${{ github.event.inputs.compliance_framework || 'commercial' }}
          OUTPUT_FORMAT: json
          SKIP_DEPLOY: ${{ github.event.inputs.skip_deploy || 'false' }}
          DAGGER_MTLS_ENABLED: ${{ vars.DAGGER_MTLS_ENABLED || 'false' }}
          FIPS_COMPLIANCE: ${{ vars.FIPS_COMPLIANCE || 'false' }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tsx dagger/pipelines/platform-pipeline.ts

      - name: Upload Pipeline Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-results-${{ github.run_id }}
          path: |
            .shinobi/plan/
            .shinobi/audit/
            coverage/
          retention-days: 30

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read pipeline results
            let results = '## 🥷 Platform Pipeline Results\n\n';

            try {
              if (fs.existsSync('.shinobi/plan/dev.json')) {
                const plan = JSON.parse(fs.readFileSync('.shinobi/plan/dev.json', 'utf8'));
                results += `### 📋 Deployment Plan\n\`\`\`json\n${JSON.stringify(plan, null, 2)}\n\`\`\`\n\n`;
              }
            } catch (error) {
              results += `### ⚠️ Plan Generation Failed\n${error.message}\n\n`;
            }

            try {
              if (fs.existsSync('.shinobi/audit/results.json')) {
                const audit = JSON.parse(fs.readFileSync('.shinobi/audit/results.json', 'utf8'));
                results += `### 🔒 Audit Results\n- **Errors:** ${audit.totalErrors || 0}\n- **Warnings:** ${audit.totalWarnings || 0}\n\n`;
              }
            } catch (error) {
              results += `### ⚠️ Audit Failed\n${error.message}\n\n`;
            }

            results += `**Environment:** ${{ github.event.inputs.environment || 'dev' }}\n`;
            results += `**Compliance:** ${{ github.event.inputs.compliance_framework || 'commercial' }}\n`;
            results += `**Status:** ${{ job.status }}\n`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: results
            });

  # Security scan job (runs in parallel)
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Compliance validation job
  compliance-validation:
    runs-on: ubuntu-latest
    name: Compliance Validation
    if: github.event.inputs.compliance_framework != 'commercial' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Run Compliance Audit
        env:
          COMPLIANCE_FRAMEWORK: ${{ github.event.inputs.compliance_framework || 'commercial' }}
          OUTPUT_FORMAT: json
        run: |
          npm ci
          npm run audit:all:strict -- --format json > compliance-results.json

      - name: Upload Compliance Results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-results-${{ github.run_id }}
          path: compliance-results.json
          retention-days: 90
