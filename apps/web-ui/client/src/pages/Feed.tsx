import { useState } from 'react';\nimport { AppShell } from '@/components/AppShell';\nimport { FeedItemComponent } from '@/components/FeedItem';\nimport { EmptyState } from '@/components/EmptyState';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { RefreshCw, Filter } from 'lucide-react';\n\n// Mock feed data\nconst mockFeedItems = [\n  {\n    id: 'feed-1',\n    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n    type: 'deployment',\n    summary: 'Production deployment completed successfully. User service v2.1.0 is now live with improved authentication flow.',\n    references: [\n      { label: 'Deployment Logs', url: '/logs/deploy-abc123' },\n      { label: 'Release Notes', url: 'https://github.com/company/user-service/releases/v2.1.0' }\n    ],\n    tags: ['production', 'deployment', 'user-service'],\n    severity: 'low' as const,\n    isUnread: true\n  },\n  {\n    id: 'feed-2',\n    timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(),\n    type: 'security',\n    summary: 'Security scan detected 3 medium-priority vulnerabilities in payment-service dependencies. Automated fix PR has been created.',\n    references: [\n      { label: 'Security Report', url: '/security/scan-xyz789' },\n      { label: 'Fix PR #142', url: 'https://github.com/company/payment-service/pull/142' }\n    ],\n    tags: ['security', 'vulnerabilities', 'payment-service'],\n    severity: 'med' as const,\n    isUnread: true\n  },\n  {\n    id: 'feed-3',\n    timestamp: new Date(Date.now() - 1000 * 60 * 45).toISOString(),\n    type: 'infrastructure',\n    summary: 'Database cluster scaling completed. Added 2 read replicas to handle increased load during peak hours.',\n    references: [\n      { label: 'Infrastructure Metrics', url: '/metrics/database-cluster' },\n      { label: 'Scaling Documentation', url: '/docs/database-scaling' }\n    ],\n    tags: ['infrastructure', 'database', 'scaling'],\n    severity: 'low' as const,\n    isUnread: false\n  }\n];\n\nexport default function Feed() {\n  const [feedItems, setFeedItems] = useState(mockFeedItems);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    // Simulate refresh\n    setTimeout(() => {\n      setIsLoading(false);\n      console.log('Feed refreshed');\n    }, 1000);\n  };\n\n  const handleMarkRead = (id: string) => {\n    setFeedItems(items => \n      items.map(item => \n        item.id === id ? { ...item, isUnread: false } : item\n      )\n    );\n  };\n\n  return (\n    <AppShell breadcrumbs={[{ label: 'Activity Feed' }]}>\n      <div className=\"space-y-6 max-w-4xl\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-h1 font-bold text-foreground mb-2\">\n              Activity Feed\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Real-time updates from across your development platform\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={handleRefresh}\n              disabled={isLoading}\n              data-testid=\"button-refresh-feed\"\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              data-testid=\"button-filter-feed\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filter\n            </Button>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"p-4\">\n                <Skeleton className=\"h-4 w-1/4 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </Card>\n            ))}\n          </div>\n        ) : feedItems.length === 0 ? (\n          <EmptyState\n            title=\"No activity yet\"\n            hint=\"When events happen across your platform, they'll appear here\"\n            cta={\n              <Button onClick={handleRefresh} data-testid=\"button-refresh-empty\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Refresh Feed\n              </Button>\n            }\n          />\n        ) : (\n          <div className=\"space-y-4\">\n            {feedItems.map((item) => (\n              <FeedItemComponent\n                key={item.id}\n                item={item}\n                onMarkRead={handleMarkRead}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </AppShell>\n  );\n}\n