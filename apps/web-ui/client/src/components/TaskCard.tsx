import { Badge } from './Badge';\nimport { Timestamp } from './Timestamp';\nimport { TagList } from './TagList';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, XCircle, Clock, AlertTriangle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  createdAt: string;\n  createdBy: string;\n  status: 'pending' | 'completed' | 'blocked' | 'rejected';\n  proposedChange?: {\n    diff: string;\n    manifestPath?: string;\n    resourceId?: string;\n  };\n  references: { label: string; url: string }[];\n  autoApproved?: boolean;\n  blockedBy?: string;\n  tags?: string[];\n}\n\ninterface TaskCardProps {\n  task: Task;\n  onApprove?: (id: string) => void;\n  onReject?: (id: string) => void;\n  onClick?: (id: string) => void;\n  className?: string;\n}\n\nconst statusConfig = {\n  pending: { icon: Clock, variant: 'warn' as const, label: 'Pending' },\n  completed: { icon: CheckCircle, variant: 'success' as const, label: 'Completed' },\n  blocked: { icon: AlertTriangle, variant: 'danger' as const, label: 'Blocked' },\n  rejected: { icon: XCircle, variant: 'danger' as const, label: 'Rejected' },\n};\n\nexport function TaskCard({ task, onApprove, onReject, onClick, className }: TaskCardProps) {\n  const statusInfo = statusConfig[task.status];\n  const StatusIcon = statusInfo.icon;\n  \n  const handleApprove = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onApprove?.(task.id);\n    console.log('Approving task:', task.id);\n  };\n\n  const handleReject = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onReject?.(task.id);\n    console.log('Rejecting task:', task.id);\n  };\n\n  return (\n    <Card \n      className={cn('hover-elevate cursor-pointer', className)}\n      onClick={() => onClick?.(task.id)}\n      data-testid={`task-card-${task.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-foreground mb-1\">{task.title}</h3>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <span>by {task.createdBy}</span>\n              <span>â€¢</span>\n              <Timestamp iso={task.createdAt} />\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={statusInfo.variant} className=\"flex items-center gap-1\">\n              <StatusIcon className=\"w-3 h-3\" />\n              {statusInfo.label}\n            </Badge>\n            {task.autoApproved && (\n              <Badge variant=\"info\">Auto</Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        <p className=\"text-muted-foreground text-sm leading-relaxed\">\n          {task.description}\n        </p>\n        \n        {task.tags && task.tags.length > 0 && (\n          <TagList tags={task.tags} />\n        )}\n        \n        {task.blockedBy && (\n          <div className=\"p-2 bg-destructive/10 border border-destructive/20 rounded text-sm text-destructive\">\n            Blocked by: {task.blockedBy}\n          </div>\n        )}\n        \n        {task.status === 'pending' && !task.autoApproved && (\n          <div className=\"flex gap-2 pt-2 border-t border-border\">\n            <Button \n              size=\"sm\" \n              variant=\"default\"\n              onClick={handleApprove}\n              data-testid={`button-approve-${task.id}`}\n            >\n              <CheckCircle className=\"w-4 h-4 mr-1\" />\n              Approve\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={handleReject}\n              data-testid={`button-reject-${task.id}`}\n            >\n              <XCircle className=\"w-4 h-4 mr-1\" />\n              Reject\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}