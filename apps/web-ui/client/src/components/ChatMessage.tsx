import { ReactNode } from 'react';\nimport { Badge } from './Badge';\nimport { Button } from '@/components/ui/button';\nimport { CodeBlock } from './CodeBlock';\nimport { cn } from '@/lib/utils';\nimport { User, Bot, Settings } from 'lucide-react';\n\ninterface Reference {\n  id: number;\n  title: string;\n  url: string;\n}\n\ninterface Action {\n  id: string;\n  label: string;\n  kind: 'confirm' | 'cancel';\n}\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  contentMd: string;\n  refs?: Reference[];\n  actions?: Action[];\n}\n\ninterface ChatMessageProps {\n  message: ChatMessage;\n  onAction?: (actionId: string) => void;\n  className?: string;\n}\n\nconst roleConfig = {\n  user: { icon: User, name: 'You', variant: 'user' as const },\n  assistant: { icon: Bot, name: 'Shinobi AI', variant: 'assistant' as const },\n  system: { icon: Settings, name: 'System', variant: 'system' as const },\n};\n\nexport function ChatMessage({ message, onAction, className }: ChatMessageProps) {\n  const config = roleConfig[message.role];\n  const Icon = config.icon;\n\n  const handleAction = (actionId: string) => {\n    onAction?.(actionId);\n    console.log('Chat action triggered:', actionId);\n  };\n\n  // Simple markdown-like rendering (would use proper markdown parser in real app)\n  const renderContent = (content: string) => {\n    // Handle code blocks\n    const codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)```/g;\n    const parts = [];\n    let lastIndex = 0;\n    let match;\n\n    while ((match = codeBlockRegex.exec(content)) !== null) {\n      // Add text before code block\n      if (match.index > lastIndex) {\n        parts.push(\n          <span key={lastIndex} className=\"whitespace-pre-wrap\">\n            {content.slice(lastIndex, match.index)}\n          </span>\n        );\n      }\n      \n      // Add code block\n      parts.push(\n        <CodeBlock \n          key={match.index}\n          code={match[2].trim()}\n          lang={match[1] as any || 'text'}\n          className=\"my-2\"\n        />\n      );\n      \n      lastIndex = match.index + match[0].length;\n    }\n    \n    // Add remaining text\n    if (lastIndex < content.length) {\n      parts.push(\n        <span key={lastIndex} className=\"whitespace-pre-wrap\">\n          {content.slice(lastIndex)}\n        </span>\n      );\n    }\n    \n    return parts.length > 0 ? parts : (\n      <span className=\"whitespace-pre-wrap\">{content}</span>\n    );\n  };\n\n  return (\n    <div \n      className={cn(\n        'flex gap-3 py-4',\n        message.role === 'user' && 'flex-row-reverse',\n        className\n      )}\n      data-testid={`chat-message-${message.id}`}\n    >\n      <div className=\"flex-shrink-0\">\n        <div className={cn(\n          'w-8 h-8 rounded-full flex items-center justify-center text-sm',\n          message.role === 'user' && 'bg-primary text-primary-foreground',\n          message.role === 'assistant' && 'bg-accent text-accent-foreground',\n          message.role === 'system' && 'bg-muted text-muted-foreground'\n        )}>\n          <Icon className=\"w-4 h-4\" />\n        </div>\n      </div>\n      \n      <div className={cn(\n        'flex-1 space-y-2',\n        message.role === 'user' && 'text-right'\n      )}>\n        <div className=\"text-xs text-muted-foreground\">\n          {config.name}\n        </div>\n        \n        <div className={cn(\n          'p-3 rounded-lg max-w-3xl',\n          message.role === 'user' && 'bg-primary text-primary-foreground ml-auto',\n          message.role === 'assistant' && 'bg-card border border-border',\n          message.role === 'system' && 'bg-muted text-muted-foreground'\n        )}>\n          <div className=\"prose prose-sm max-w-none\">\n            {renderContent(message.contentMd)}\n          </div>\n          \n          {message.refs && message.refs.length > 0 && (\n            <div className=\"mt-3 pt-3 border-t border-border/50\">\n              <div className=\"text-xs text-muted-foreground mb-2\">References:</div>\n              <div className=\"space-y-1\">\n                {message.refs.map((ref) => (\n                  <a\n                    key={ref.id}\n                    href={ref.url}\n                    className=\"block text-xs text-accent-foreground hover:text-primary transition-colors\"\n                    data-testid={`ref-link-${ref.id}`}\n                  >\n                    [{ref.id}] {ref.title}\n                  </a>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {message.actions && message.actions.length > 0 && (\n            <div className=\"mt-3 pt-3 border-t border-border/50 flex gap-2\">\n              {message.actions.map((action) => (\n                <Button\n                  key={action.id}\n                  size=\"sm\"\n                  variant={action.kind === 'confirm' ? 'default' : 'outline'}\n                  onClick={() => handleAction(action.id)}\n                  data-testid={`button-action-${action.id}`}\n                >\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}