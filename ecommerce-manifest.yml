# E-Commerce Web Application Manifest
# Generated by Shinobi Platform Intelligence
# Commercial Compliance Framework

service: ecommerce-platform
owner: platform-engineering
complianceFramework: commercial
environment: production

# Service Configuration
config:
  region: us-east-1
  accountId: ${AWS_ACCOUNT_ID}
  tags:
    Environment: production
    Application: ecommerce
    Owner: platform-engineering
    ComplianceFramework: commercial

# Components
components:
  # Networking Infrastructure
  - name: main-vpc
    type: vpc
    config:
      cidr: 10.0.0.0/16
      maxAzs: 3
      natGateways: 2
      flowLogs:
        enabled: true
        retentionInDays: 1827
        removalPolicy: retain
      vpcEndpoints:
        s3: true
        dynamodb: true
        secretsManager: true
        kms: true
        lambda: false
      subnets:
        public:
          cidrMask: 24
        private:
          cidrMask: 24
        database:
          cidrMask: 28
      monitoring:
        enabled: true
        alarms:
          natGatewayPacketDropThreshold: 10
          vpcFlowLogDeliveryFailures: 5
      security:
        createDefaultSecurityGroups: true
        complianceNacls:
          enabled: true
          mode: standard
        restrictDefaultSecurityGroup: false

  # Web Application Firewall
  - name: web-acl
    type: waf-web-acl
    config:
      scope: CLOUDFRONT
      defaultAction: allow
      managedRuleGroups:
        - name: AWSManagedRulesCommonRuleSet
          vendorName: AWS
          priority: 1
        - name: AWSManagedRulesKnownBadInputsRuleSet
          vendorName: AWS
          priority: 2
        - name: AWSManagedRulesSQLiRuleSet
          vendorName: AWS
          priority: 3
      logging:
        enabled: true
        logDestinationType: cloudwatch
      monitoring:
        enabled: true
        alarms:
          blockedRequestsThreshold: 1000

  # API Gateway and Lambda Backend
  - name: api-gateway
    type: api-gateway-http
    config:
      cors: true
      throttling:
        burstLimit: 5000
        rateLimit: 2000
      monitoring:
        enabled: true
        detailedMetrics: true
        alarms:
          errorRateThreshold: 5
          latencyThreshold: 1000

  - name: api-lambda
    type: lambda-api
    config:
      handler: src/api.handler
      runtime: nodejs20.x
      memory: 1024
      timeout: 30
      environment:
        NODE_ENV: production
        LOG_LEVEL: info
      monitoring:
        enabled: true
        alarms:
          errorRateThreshold: 5
          durationThreshold: 5000
          throttlingThreshold: 10

  # Container Registry
  - name: app-registry
    type: ecr-repository
    config:
      repositoryName: ecommerce-frontend
      imageScanningConfiguration:
        scanOnPush: true
      imageTagMutability: IMMUTABLE
      encryption:
        encryptionType: KMS
      lifecyclePolicy:
        maxImageCount: 50
        maxImageAge: 180
        untaggedImageRetentionDays: 3
      monitoring:
        enabled: true
        detailedMetrics: true
        alarms:
          pushRateThreshold: 100
          sizeThreshold: 21474836480  # 20GB
      compliance:
        retentionPolicy: retain
        auditLogging: true

  # ECS Cluster for Frontend
  - name: frontend-cluster
    type: ecs-cluster
    config:
      capacityProviders: [FARGATE, FARGATE_SPOT]
      enableServiceConnect: true
      containerInsights: true
      monitoring:
        enabled: true
        detailedMetrics: true
        alarms:
          cpuUtilizationThreshold: 80
          memoryUtilizationThreshold: 85
      compliance:
        retentionPolicy: retain
        auditLogging: true

  - name: frontend-service
    type: ecs-fargate-service
    config:
      taskDefinition:
        cpu: 512
        memory: 1024
        containerDefinitions:
          - name: frontend
            image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/ecommerce-frontend:latest
            portMappings:
              - containerPort: 3000
                protocol: tcp
            environment:
              - name: NODE_ENV
                value: production
              - name: API_ENDPOINT
                value: https://api.ecommerce.example.com
      desiredCount: 3
      deploymentConfiguration:
        maximumPercent: 200
        minimumHealthyPercent: 50
      autoScaling:
        enabled: true
        targetCpuUtilization: 70
        minCapacity: 2
        maxCapacity: 20
      monitoring:
        enabled: true
        alarms:
          cpuUtilizationThreshold: 80
          memoryUtilizationThreshold: 85

  # Application Load Balancer
  - name: frontend-alb
    type: application-load-balancer
    config:
      internetFacing: true
      idleTimeout: 60
      healthCheck:
        path: /health
        interval: 30
        timeout: 5
        healthyThreshold: 2
        unhealthyThreshold: 3
      monitoring:
        enabled: true
        alarms:
          targetResponseTimeThreshold: 2
          unhealthyHostThreshold: 1

  # Database Layer
  - name: main-database
    type: rds-postgres
    config:
      engine: postgres
      engineVersion: "15.4"
      instanceClass: db.r6g.large
      allocatedStorage: 100
      maxAllocatedStorage: 1000
      multiAz: true
      backupRetentionPeriod: 30
      backupWindow: "03:00-04:00"
      maintenanceWindow: "sun:04:00-sun:05:00"
      enablePerformanceInsights: true
      enableEnhancedMonitoring: true
      monitoringInterval: 60
      monitoring:
        enabled: true
        alarms:
          cpuUtilizationThreshold: 80
          freeableMemoryThreshold: 1024
          connectionCountThreshold: 100
          diskQueueDepthThreshold: 20
      compliance:
        retentionPolicy: retain
        auditLogging: true
        encryption:
          enabled: true
          kmsKeyId: alias/aws/rds

  - name: read-replica-database
    type: rds-postgres
    config:
      engine: postgres
      engineVersion: "15.4"
      instanceClass: db.r6g.large
      multiAz: false
      enablePerformanceInsights: true
      enableEnhancedMonitoring: true
      monitoringInterval: 60
      monitoring:
        enabled: true
        alarms:
          cpuUtilizationThreshold: 80
          freeableMemoryThreshold: 1024
          lagThreshold: 1000
      compliance:
        retentionPolicy: retain
        auditLogging: true

  # Caching Layer
  - name: redis-cache
    type: elasticache-redis
    config:
      nodeType: cache.r6g.large
      numCacheNodes: 2
      engineVersion: "7.0"
      port: 6379
      parameterGroupFamily: redis7.x
      monitoring:
        enabled: true
        alarms:
          cpuUtilizationThreshold: 80
          memoryUtilizationThreshold: 90
          evictionsThreshold: 100
      compliance:
        retentionPolicy: retain
        auditLogging: true
        encryption:
          enabled: true
          atRestEncryptionEnabled: true
          transitEncryptionEnabled: true

  # Storage Layer
  - name: static-assets
    type: s3-bucket
    config:
      bucketName: ecommerce-static-assets
      versioning: true
      publicReadAccess: false
      blockPublicAccess: true
      encryption:
        enabled: true
        kmsKeyId: alias/aws/s3
      lifecycleRules:
        - id: transition-to-ia
          status: Enabled
          transitions:
            - days: 30
              storageClass: STANDARD_IA
            - days: 90
              storageClass: GLACIER
      monitoring:
        enabled: true
        alarms:
          bucketSizeThreshold: 107374182400  # 100GB
          numberOfObjectsThreshold: 1000000
      compliance:
        retentionPolicy: retain
        auditLogging: true

  # CDN
  - name: cloudfront-distribution
    type: cloudfront-distribution
    config:
      defaultBehavior:
        origin: ecommerce-static-assets.s3.amazonaws.com
        viewerProtocolPolicy: redirect-to-https
        cachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingOptimized
        compress: true
      priceClass: PriceClass_100
      webAclId: ${WEB_ACL_ID}
      monitoring:
        enabled: true
        alarms:
          errorRateThreshold: 5
          cacheHitRatioThreshold: 90
      compliance:
        retentionPolicy: retain

  # Message Queue
  - name: order-queue
    type: sqs-queue
    config:
      queueName: ecommerce-order-processing
      visibilityTimeout: 300
      messageRetentionPeriod: 1209600  # 14 days
      receiveMessageWaitTime: 20  # Long polling
      deadLetterQueue:
        maxReceiveCount: 3
      monitoring:
        enabled: true
        alarms:
          queueDepthThreshold: 1000
          messageAgeThreshold: 300
      compliance:
        retentionPolicy: retain
        auditLogging: true
        encryption:
          enabled: true
          kmsKeyId: alias/aws/sqs

  # Notification Service
  - name: notification-topic
    type: sns-topic
    config:
      topicName: ecommerce-notifications
      displayName: E-commerce Notifications
      monitoring:
        enabled: true
        alarms:
          publishRateThreshold: 100
      compliance:
        retentionPolicy: retain
        auditLogging: true
        encryption:
          enabled: true
          kmsKeyId: alias/aws/sns

  # Secrets Management
  - name: app-secrets
    type: secrets-manager
    config:
      secretName: ecommerce-app-secrets
      description: Application secrets for e-commerce platform
      rotationEnabled: true
      rotationDays: 30
      monitoring:
        enabled: true
        alarms:
          secretAccessThreshold: 100
      compliance:
        retentionPolicy: retain
        auditLogging: true

  # Monitoring and Observability
  - name: platform-monitoring
    type: shinobi
    config:
      observability:
        enabled: true
        otelCollectorEndpoint: https://otel-collector.commercial.us-east-1.platform.local:4317
        traceSamplingRate: 0.1
        metricsInterval: 300
        logsRetentionDays: 365
      monitoring:
        enabled: true
        detailedMetrics: true
        alarms:
          enabled: true
      compliance:
        retentionPolicy: retain
        auditLogging: true

# Component Bindings
bindings:
  - source: api-lambda
    target: main-database
    type: database-connection
    config:
      connectionType: primary

  - source: api-lambda
    target: read-replica-database
    type: database-connection
    config:
      connectionType: read-only

  - source: api-lambda
    target: redis-cache
    type: cache-connection
    config:
      connectionType: read-write

  - source: api-lambda
    target: order-queue
    type: message-queue
    config:
      operation: send-message

  - source: frontend-service
    target: api-gateway
    type: api-connection
    config:
      connectionType: https

  - source: cloudfront-distribution
    target: static-assets
    type: storage-connection
    config:
      connectionType: read-only

  - source: api-lambda
    target: notification-topic
    type: notification-connection
    config:
      operation: publish

# Deployment Configuration
deployment:
  strategy: rolling
  maxParallelDeployments: 2
  healthCheckTimeout: 300
  rollbackOnFailure: true

# Environment Variables
environment:
  NODE_ENV: production
  LOG_LEVEL: info
  API_VERSION: v1
  CACHE_TTL: 3600
  SESSION_TIMEOUT: 1800

# Security Configuration
security:
  encryption:
    enabled: true
    kmsKeyId: alias/aws/kms
  accessControl:
    leastPrivilege: true
  auditLogging:
    enabled: true
  vulnerabilityScanning:
    enabled: true
    schedule: daily

# Compliance Configuration
compliance:
  framework: commercial
  auditLogging: true
  dataRetention:
    logs: 365
    metrics: 90
    traces: 30
  encryption:
    atRest: true
    inTransit: true
  accessControl:
    mfaRequired: true
    sessionTimeout: 3600
