# Report Generation Service Manifest
# Generated by Shinobi Platform Intelligence
# Components: Lambda API + ElastiCache Redis

service: report-generation-api
owner: platform-team
complianceFramework: commercial
environment: development

# Service Description
description: "A serverless report generation system with Lambda API and Redis caching for business intelligence and analytics"

# Components
components:
  # Lambda API for report generation
  - name: report-api
    type: lambda-api
    config:
      handler: src/report-api.handler
      runtime: nodejs20.x
      memory: 1024
      timeout: 300
      environment:
        NODE_ENV: development
        LOG_LEVEL: info
        CACHE_TTL: 3600
      api:
        cors: true
        throttling:
          burstLimit: 2000
          rateLimit: 1000
      layers:
        - arn:aws:lambda:us-east-1:123456789012:layer:report-generation:1

  # ElastiCache Redis for caching
  - name: report-cache
    type: elasticache-redis
    config:
      nodeType: cache.t3.micro
      numCacheNodes: 1
      engineVersion: "7.0"
      port: 6379
      parameterGroup: default.redis7
      securityGroups:
        - sg-report-cache
      subnetGroup: report-cache-subnet
      encryption:
        enabled: true
        atRest: true
        inTransit: true
      backup:
        enabled: true
        retentionPeriod: 7
      monitoring:
        enabled: true
        logDeliveryConfigurations:
          - destinationType: cloudwatch-logs
            logFormat: text
            logType: slow-log

  # S3 bucket for report storage
  - name: report-storage
    type: s3-bucket
    config:
      bucketName: report-generation-storage
      versioning: true
      encryption:
        enabled: true
        algorithm: AES256
      lifecycle:
        rules:
          - id: delete-old-reports
            status: Enabled
            expiration:
              days: 30
      cors:
        allowedOrigins: ["*"]
        allowedMethods: ["GET", "POST", "PUT"]
        allowedHeaders: ["*"]

# Component Bindings
bindings:
  # API to Cache binding
  - name: api-cache-connection
    source: report-api
    target: report-cache
    type: cache-connection
    config:
      connectionType: redis
      capabilities:
        - cache:redis:read
        - cache:redis:write
      environment:
        REDIS_HOST: ${report-cache.primaryEndpoint}
        REDIS_PORT: 6379
        REDIS_TLS: true

  # API to Storage binding
  - name: api-storage-connection
    source: report-api
    target: report-storage
    type: storage-connection
    config:
      connectionType: s3
      capabilities:
        - storage:s3:read
        - storage:s3:write
      environment:
        S3_BUCKET: ${report-storage.bucketName}
        S3_REGION: us-east-1

# Environment-specific overrides
environments:
  development:
    components:
      report-api:
        config:
          memory: 512
          timeout: 60
      report-cache:
        config:
          nodeType: cache.t3.micro
          numCacheNodes: 1

  staging:
    components:
      report-api:
        config:
          memory: 1024
          timeout: 180
      report-cache:
        config:
          nodeType: cache.t3.small
          numCacheNodes: 2

  production:
    components:
      report-api:
        config:
          memory: 2048
          timeout: 300
      report-cache:
        config:
          nodeType: cache.r6g.large
          numCacheNodes: 3
          multiAZ: true

# Governance and Compliance
governance:
  suppressions: []
  tags:
    Service: report-generation-api
    Owner: platform-team
    Environment: ${environment}
    Compliance: commercial
    ManagedBy: shinobi
    CostCenter: engineering
    DataClassification: internal

# Observability Configuration
observability:
  enabled: true
  traceSamplingRate: 1.0
  metricsInterval: 60
  logRetentionDays: 30
  dashboards:
    - name: report-generation-overview
      type: reliability
    - name: report-generation-performance
      type: performance
    - name: report-generation-security
      type: security

# Security Configuration
security:
  encryption:
    enabled: true
    keyManagement: aws-kms
  network:
    vpcId: vpc-12345678
    subnetIds:
      - subnet-12345678
      - subnet-87654321
  accessControl:
    leastPrivilege: true
    roleBasedAccess: true
