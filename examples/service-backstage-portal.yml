apiVersion: v1
kind: Service
metadata:
  name: shinobi-backstage-portal
  labels:
    app.kubernetes.io/name: shinobi-backstage-portal
    app.kubernetes.io/version: "1.0.0"
    platform.shinobi.io/service: backstage-portal
    platform.shinobi.io/component: developer-portal
spec:
  serviceName: backstage-portal
  version: "1.0.0"
  environment: dev
  complianceFramework: commercial

  # Components that make up this service
  components:
    # Main Backstage Portal component
    - name: backstage-portal
      type: backstage-portal
      config:
        portal:
          name: "Shinobi Developer Portal"
          organization: "Shinobi Platform"
          description: "Developer portal for Shinobi platform components and services"
          baseUrl: "https://backstage.shinobi.local"

        database:
          instanceClass: "db.t3.micro"
          allocatedStorage: 20
          maxAllocatedStorage: 100
          backupRetentionDays: 7
          multiAz: false
          deletionProtection: true

        backend:
          desiredCount: 2
          cpu: 512
          memory: 1024
          healthCheckPath: "/health"
          healthCheckInterval: 30

        frontend:
          desiredCount: 2
          cpu: 256
          memory: 512
          healthCheckPath: "/"
          healthCheckInterval: 30

        ecr:
          maxImageCount: 10
          imageScanOnPush: true

        observability:
          logRetentionDays: 30
          cpuThreshold: 80
          memoryThreshold: 85
          enableTracing: true
          enableMetrics: true

        security:
          enableEncryption: true
          enableVpcFlowLogs: true
          enableWaf: false

        auth:
          provider: github
          github:
            clientId: "${GITHUB_CLIENT_ID}"
            clientSecret: "${GITHUB_CLIENT_SECRET}"
            organization: "shinobi-platform"

        catalog:
          providers:
            - type: github
              id: shinobi-platform
              org: shinobi-platform
              catalogPath: /catalog-info.yaml

    # PostgreSQL database component
    - name: backstage-database
      type: rds-postgres
      config:
        instanceClass: "db.t3.micro"
        allocatedStorage: 20
        maxAllocatedStorage: 100
        databaseName: backstage
        masterUsername: backstage
        masterPassword: "${RDS_MASTER_PASSWORD}"
        backupRetentionPeriod: 7
        multiAz: false
        deletionProtection: true

    # ECR repository for container images
    - name: backstage-images
      type: ecr-repository
      config:
        imageScanningConfiguration:
          scanOnPush: true
        imageTagMutability: MUTABLE

    # S3 bucket for static assets
    - name: backstage-assets
      type: s3-bucket
      config:
        versioning:
          enabled: true
        publicReadAccess: false
        cors:
          - allowedOrigins: ["https://backstage.shinobi.local"]
            allowedMethods: ["GET", "HEAD"]
            allowedHeaders: ["*"]

  # Bindings between components
  bindings:
    - source: backstage-portal
      target: backstage-database
      type: database-connection

    - source: backstage-portal
      target: backstage-assets
      type: static-assets

    - source: backstage-portal
      target: backstage-images
      type: container-registry

  # Observability configuration
  observability:
    logging:
      level: info
      destinations:
        - cloudwatch
    metrics:
      enabled: true
      customMetrics:
        - name: backstage_requests_total
          type: counter
          description: "Total number of Backstage requests"
        - name: backstage_response_time
          type: histogram
          description: "Backstage response time"
    tracing:
      enabled: true
      samplingRate: 0.1

  # Security configuration
  security:
    encryption:
      atRest: true
      inTransit: true
    networkSecurity:
      vpc: true
      securityGroups:
        - name: backstage-backend-sg
          rules:
            - type: ingress
              fromPort: 7007
              toPort: 7007
              protocol: tcp
              source: backstage-frontend-sg
        - name: backstage-frontend-sg
          rules:
            - type: ingress
              fromPort: 80
              toPort: 80
              protocol: tcp
              source: 0.0.0.0/0
            - type: ingress
              fromPort: 443
              toPort: 443
              protocol: tcp
              source: 0.0.0.0/0

  # Compliance and governance
  compliance:
    framework: commercial
    dataClassification: internal
    auditLogging: true
    backupRequired: true

  # Deployment configuration
  deployment:
    strategy: rolling
    replicas: 2
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    healthChecks:
      liveness:
        path: /health
        port: 7007
        initialDelaySeconds: 30
        periodSeconds: 10
      readiness:
        path: /health/ready
        port: 7007
        initialDelaySeconds: 5
        periodSeconds: 5
